import * as FileSystem from 'expo-file-system';
export const checkPronunciation = async (uri, result, setSpokenText) => {
  if (!uri) {
    alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô");
    return;
  }

  console.log("üìÇ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå:", uri);
  try {
    const fileInfo = await FileSystem.getInfoAsync(uri);
    console.log("üì¶ File info:", fileInfo);

    const fileUri = fileInfo.uri;
    const fileName = fileUri.split("/").pop();
    const fileType = "audio/m4a";

    const formData = new FormData();
    formData.append("audio", {
      uri: fileUri,
      name: fileName,
      type: fileType,
    });

    const response = await fetch("http://192.168.0.32:5000/transcribe", {
      method: "POST",
      body: formData,
      headers: {
        "Content-Type": "multipart/form-data",
      },
    });

    const data = await response.json();
    console.log("üì• ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å backend:", data);

    const expected = result.en?.toLowerCase().trim().replace(/[^\w\s]|_/g, "");
const transcript = data.text?.toLowerCase().trim().replace(/[^\w\s]|_/g, "");

    setSpokenText(transcript);

    setSpokenText(transcript);

if (transcript.includes(expected)) {
  alert("‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!");
} else {
  alert("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡πà‡∏≤: " + transcript);
}
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå:", err);
    alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ");
  }
};
